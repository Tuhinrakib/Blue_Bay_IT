@model IEnumerable<Project__Mini_Stack_Overflow.Models.User>

@{
    ViewData["Title"] = "User List";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1 class="text-center">User List</h1>

<p class="text-center">
    <a asp-action="Create" class="btn btn-success">Create New User</a>
</p>

<!-- Search Bar with Button -->
<div class="input-group mb-3" style="margin-top: 20px;">
    <input type="text" id="searchInput" class="form-control" placeholder="Search by username or email...">
    <button id="searchButton" class="btn btn-primary">Search</button>
</div>

<!-- User Table -->
<div class="table-responsive">
    <table id="usersTable" class="table table-striped table-bordered">
        <thead>
            <tr>
                <th>@Html.DisplayNameFor(model => model.Username)</th>
                <th>@Html.DisplayNameFor(model => model.Email)</th>
                <th>@Html.DisplayNameFor(model => model.PasswordHash)</th>
                <th class="text-center">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>@Html.DisplayFor(modelItem => item.Username)</td>
                    <td>@Html.DisplayFor(modelItem => item.Email)</td>
                    <td>@Html.DisplayFor(modelItem => item.PasswordHash)</td>
                    <td class="text-center">
                        <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-warning btn-sm">Edit</a> |
                        <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-info btn-sm">Details</a> |
                        <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-danger btn-sm">Delete</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<!-- Pagination -->
<div id="pagination" class="d-flex justify-content-center mt-3"></div>

<!-- JavaScript for Pagination and Search -->
@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const rowsPerPage = 5; // Number of rows per page
            let currentPage = 1;

            const table = document.getElementById("usersTable");
            const tbody = table.querySelector("tbody");
            const rows = Array.from(tbody.querySelectorAll("tr"));
            const pagination = document.getElementById("pagination");
            const searchInput = document.getElementById("searchInput");
            const searchButton = document.getElementById("searchButton");
            let filteredRows = [...rows]; // Initially, all rows are included

            // Function to render the table rows for the current page
            function renderTable(page) {
                currentPage = page;
                const start = (page - 1) * rowsPerPage;
                const end = start + rowsPerPage;

                // Hide all rows first
                rows.forEach(row => (row.style.display = "none"));

                // Show only the rows for the current page
                filteredRows.slice(start, end).forEach(row => (row.style.display = ""));
                renderPagination();
            }

            // Function to render the pagination buttons
            function renderPagination() {
                pagination.innerHTML = "";
                const totalPages = Math.ceil(filteredRows.length / rowsPerPage);

                for (let i = 1; i <= totalPages; i++) {
                    const button = document.createElement("button");
                    button.className = "btn btn-outline-primary mx-1";
                    button.textContent = i;
                    button.onclick = () => renderTable(i);

                    if (i === currentPage) {
                        button.classList.add("active");
                    }

                    pagination.appendChild(button);
                }

                // Hide pagination if there's only one page
                pagination.style.display = totalPages > 1 ? "flex" : "none";
            }

            // Function to filter rows based on search input
            function filterTable() {
                const query = searchInput.value.toLowerCase();

                filteredRows = rows.filter(row => {
                    const cells = Array.from(row.querySelectorAll("td"));
                    return cells.some(cell => cell.textContent.toLowerCase().includes(query));
                });

                renderTable(1); // Reset to the first page after filtering
            }

            // Add event listener for the search button
            searchButton.addEventListener("click", filterTable);

            // Initial render
            renderTable(1);
        });
    </script>
}
