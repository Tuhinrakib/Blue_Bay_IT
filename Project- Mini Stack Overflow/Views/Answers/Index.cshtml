@model IEnumerable<Project__Mini_Stack_Overflow.Models.Answer>

@{
    ViewData["Title"] = "Answer List";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Answer List</h1>

<p>
    <a asp-action="Create" class="btn btn-success" style="padding: 8px 15px; border-radius: 5px; font-weight: bold; text-decoration: none; color: white; background-color: #28a745;">Create New</a>
</p>

<!-- Search Bar with Button -->
<div class="input-group mb-3" style="margin-top: 20px;">
    <input type="text" id="searchInput" class="form-control" placeholder="Search answers by text, user, or question title...">
    <button id="searchButton" class="btn btn-primary">Search</button>
</div>

<!-- Sorting Dropdown -->
<div class="d-flex justify-content-end mb-3">
    <select id="sortDropdown" class="form-select w-auto">
        <option value="answerText">Sort by Answer Text</option>
        <option value="createdAt">Sort by Created Date</option>
        <option value="user">Sort by User</option>
        <option value="questionTitle">Sort by Question Title</option>
    </select>
</div>

<!-- Answers Table -->
<div class="table-responsive">
    <table id="answersTable" class="table table-striped table-bordered" style="width: 100%; margin-top: 20px; border-collapse: collapse;">
        <thead>
            <tr style="background-color: #f8f9fa; color: #495057;">
                <th style="padding: 12px; text-align: left;">Answer Text</th>
                <th style="padding: 12px; text-align: left;">Created Date</th>
                <th style="padding: 12px; text-align: left;">User</th>
                <th style="padding: 12px; text-align: left;">Question Title</th>
                <th style="padding: 12px; text-align: center;">Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr data-answer-text="@item.AnswerText.ToLower()"
                    data-created-at="@item.CreatedAt.ToString("yyyy-MM-dd")"
                    data-user="@item.User.Email.ToLower()"
                    data-question-title="@item.Question.Title.ToLower()">
                    <td>@item.AnswerText</td>
                    <td>@item.CreatedAt.ToString("yyyy-MM-dd")</td>
                    <td>@item.User.Email</td>
                    <td>@item.Question.Title</td>
                    <td style="text-align: center;">
                        <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-warning btn-sm">Edit</a> |
                        <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-info btn-sm">Details</a> |
                        <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-danger btn-sm">Delete</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<!-- Pagination -->
<div id="pagination" class="d-flex justify-content-center mt-3"></div>

<!-- JavaScript for Sorting, Pagination, and Search -->
@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const rowsPerPage = 5; // Number of rows per page
            let currentPage = 1;

            const table = document.getElementById("answersTable");
            const tbody = table.querySelector("tbody");
            const rows = Array.from(tbody.querySelectorAll("tr"));
            const pagination = document.getElementById("pagination");
            const searchInput = document.getElementById("searchInput");
            const searchButton = document.getElementById("searchButton");
            const sortDropdown = document.getElementById("sortDropdown");
            let filteredRows = [...rows]; // Initially, all rows are included

            // Function to render the table rows for the current page
            function renderTable(page) {
                currentPage = page;
                const start = (page - 1) * rowsPerPage;
                const end = start + rowsPerPage;

                // Hide all rows first
                rows.forEach(row => (row.style.display = "none"));

                // Show only the rows for the current page
                filteredRows.slice(start, end).forEach(row => (row.style.display = ""));
                renderPagination();
            }

            // Function to render the pagination buttons
            function renderPagination() {
                pagination.innerHTML = "";
                const totalPages = Math.ceil(filteredRows.length / rowsPerPage);

                for (let i = 1; i <= totalPages; i++) {
                    const button = document.createElement("button");
                    button.className = "btn btn-outline-primary mx-1";
                    button.textContent = i;
                    button.onclick = () => renderTable(i);

                    if (i === currentPage) {
                        button.classList.add("active");
                    }

                    pagination.appendChild(button);
                }

                // Hide pagination if there's only one page
                pagination.style.display = totalPages > 1 ? "flex" : "none";
            }

            // Function to filter rows based on search input
            function filterTable() {
                const query = searchInput.value.toLowerCase();

                filteredRows = rows.filter(row => {
                    const cells = Array.from(row.querySelectorAll("td"));
                    return cells.some(cell => cell.textContent.toLowerCase().includes(query));
                });

                sortTable(); // Ensure the filtered list is also sorted
                renderTable(1); // Reset to the first page after filtering
            }

            // Function to sort rows based on the selected option
            function sortTable() {
                const sortBy = sortDropdown.value;

                filteredRows.sort((a, b) => {
                    const aValue = a.dataset[sortBy];
                    const bValue = b.dataset[sortBy];

                    if (sortBy === "createdAt") {
                        return new Date(aValue) - new Date(bValue);
                    }

                    return aValue.localeCompare(bValue);
                });

                renderTable(1); // Reset to the first page after sorting
            }

            // Add event listeners
            searchButton.addEventListener("click", filterTable);
            sortDropdown.addEventListener("change", sortTable);

            // Initial render
            renderTable(1);
        });
    </script>
}
